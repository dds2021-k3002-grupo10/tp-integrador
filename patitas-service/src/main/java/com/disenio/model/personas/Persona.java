package com.disenio.model.personas;

import com.disenio.model.mascotas.Mascota;
import com.disenio.model.mascotas.MascotaRescatada;
import com.disenio.model.usuarios.Usuario;
import com.fasterxml.jackson.annotation.JsonFormat;
import lombok.Data;

import javax.persistence.*;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.List;

/**
 * Persona generated by grupo 10
 */
@Entity
@Data
@Table(name = "persona", catalog = "patitas")
public class Persona implements java.io.Serializable {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "ID_PERSONA", unique = true, nullable = false)
    private Integer idPersona;


    @Column(name = "NOMBRE", nullable = false, length = 50)
    private String nombre;


    @Column(name = "APELLIDO", nullable = false, length = 50)
    private String apellido;


    @Column(name = "FECHA_NACIMIENTO", nullable = false, length = 0)
    @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "dd/MM/yyyy HH:mm", timezone = "GMT+8")
    private Calendar fechaNacimiento;


    @Column(name = "FECHA_ALTA", nullable = false, length = 0)
    @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "dd/MM/yyyy HH:mm", timezone = "GMT+8")
    private Calendar fechaAlta;


    @Column(name = "FECHA_ULTIMA_MODIFICACION", nullable = false, length = 0)
    @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "dd/MM/yyyy HH:mm", timezone = "GMT+8")
    private Calendar fechaUltimaModificacion;


    @Column(name = "FECHA_BAJA", length = 0)
    @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "dd/MM/yyyy HH:mm", timezone = "GMT+8")
    private Calendar fechaBaja;

    @Column(name = "ESTADO", nullable = false, length = 1)
    private char estado;

    @OneToOne(fetch = FetchType.EAGER, cascade = CascadeType.ALL)
    private PersonaDocumento personaDocumentos;

    @OneToMany(fetch = FetchType.LAZY, cascade = CascadeType.ALL)
    private List<PersonaContacto> personaContactos;

    @ManyToOne(fetch = FetchType.EAGER)
    private PersonaDireccion personaDireccions;

    @OneToMany(targetEntity = Mascota.class, mappedBy = "persona",
            fetch = FetchType.LAZY)
    private List<Mascota> mascotas;


    /*@OneToMany(fetch = FetchType.LAZY, mappedBy = "persona")
    private List<Usuario> usuarios;
*/
   /* @OneToMany(fetch = FetchType.LAZY, mappedBy = "persona")
    private List<MascotaRescatada> mascotaRescatadas;
*/
    //Constructors
    public Persona() {
        this.nombre = "";
        this.apellido = "";
        this.fechaNacimiento = Calendar.getInstance();
        this.fechaAlta = Calendar.getInstance();
        this.fechaUltimaModificacion = Calendar.getInstance();
        this.estado = 'A';
        this.mascotas = new ArrayList<>();
        // this.medioNotificacion = new NotificacionPorEmail();
    }

    public Persona(Integer idPersona, String nombre, String apellido, Calendar fechaNacimiento, Calendar fechaAlta, Calendar fechaUltimaModificacion, Calendar fechaBaja, char estado, PersonaDocumento personaDocumentos, List<PersonaContacto> personaContactos, PersonaDireccion personaDireccions, List<Mascota> mascotas, List<Usuario> usuarios, List<MascotaRescatada> mascotaRescatadas) {
        this.idPersona = idPersona;
        this.nombre = nombre;
        this.apellido = apellido;
        this.fechaNacimiento = fechaNacimiento;
        this.fechaAlta = fechaAlta;
        this.fechaUltimaModificacion = fechaUltimaModificacion;
        this.fechaBaja = fechaBaja;
        this.estado = estado;
        this.personaDocumentos = personaDocumentos;
        this.personaContactos = personaContactos;
        this.personaDireccions = personaDireccions;
        this.mascotas = mascotas;
    }


    //Getters And Setters
    public Integer getIdPersona() {
        return idPersona;
    }

    public void setIdPersona(Integer idPersona) {
        this.idPersona = idPersona;
    }

    public String getNombre() {
        return nombre;
    }

    public void setNombre(String nombre) {
        this.nombre = nombre;
    }

    public String getApellido() {
        return apellido;
    }

    public void setApellido(String apellido) {
        this.apellido = apellido;
    }

    public Calendar getFechaNacimiento() {
        return fechaNacimiento;
    }

    public void setFechaNacimiento(Calendar fechaNacimiento) {
        this.fechaNacimiento = fechaNacimiento;
    }

    public Calendar getFechaAlta() {
        return fechaAlta;
    }

    public void setFechaAlta(Calendar fechaAlta) {
        this.fechaAlta = fechaAlta;
    }

    public Calendar getFechaUltimaModificacion() {
        return fechaUltimaModificacion;
    }

    public void setFechaUltimaModificacion(Calendar fechaUltimaModificacion) {
        this.fechaUltimaModificacion = fechaUltimaModificacion;
    }

    public Calendar getFechaBaja() {
        return fechaBaja;
    }

    public void setFechaBaja(Calendar fechaBaja) {
        this.fechaBaja = fechaBaja;
    }

    public char getEstado() {
        return estado;
    }

    public void setEstado(char estado) {
        this.estado = estado;
    }

    public PersonaDocumento getPersonaDocumentos() {
        return personaDocumentos;
    }

    public void setPersonaDocumentos(PersonaDocumento personaDocumentos) {
        this.personaDocumentos = personaDocumentos;
    }

    public List<PersonaContacto> getPersonaContactos() {
        return personaContactos;
    }

    public void setPersonaContactos(List<PersonaContacto> personaContactos) {
        this.personaContactos = personaContactos;
    }

    public PersonaDireccion getPersonaDireccions() {
        return personaDireccions;
    }

    public void setPersonaDireccions(PersonaDireccion personaDireccions) {
        this.personaDireccions = personaDireccions;
    }

    public List<Mascota> getMascotas() {
        return mascotas;
    }

    public void setMascotas(List<Mascota> mascotas) {
        this.mascotas = mascotas;
    }


    //Funcionalidad
    public void addPersonaContacto(PersonaContacto personaContacto) {
        this.addPersonaContacto(personaContacto);
    }

    public void notificar(String mensaje) {
        /*TODO magia notificacion*/
    }

    public int edad() {
        Calendar now = Calendar.getInstance();
        Calendar bdThisYear = Calendar.getInstance();
        int age = now.get(Calendar.YEAR) - this.fechaNacimiento.get(Calendar.YEAR);
        if (bdThisYear.after(now))
            age--;
        return age;
    }

    public int cantMascotas() {
        return mascotas.size();
    }

}


